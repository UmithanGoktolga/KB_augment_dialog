[P1T2] ============ (Job load_and_train_and_save started)
[P1T2] =========================
[P1T2] Training epoch 0
[P1T2] =========================
[P1T2] 0 : ================== [0]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0240sec
[P1T2] Output is exact
[P1T2] Created 0 model parses for training sample:
[P1T2] Generated lexicon size = 144
[P1T2] Lexicon induction parsing time: 0.0460sec
[P1T2] Output is exact
[P1T2] Created 1 lexicon generation parses for training sample
[P1T2] Removed 0 invalid parses
[P1T2] 1 valid best parses for lexical generation:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#DEFAULT=0.0(0.0),XEME#DEFAULT=0.0(0.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#DEFAULT=0.0(0.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XEME#DEFAULT=0.0(0.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Feature weights: {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#DEFAULT=0.0(0.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XEME#DEFAULT=0.0(0.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Added LexicalEntry to model: can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] Constrained parsing time: 0.0200sec
[P1T2] Skipping parameter update, no parses
[P1T2] Total sample handling time: 0.1000sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 1 model parses with average time of 0.0240sec
Gold standard as optimal model parse:
0 :: . 1                                                         
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 1
[P1T2] =========================
[P1T2] 0 : ================== [1]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0290sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 1.000000
[P1T2] No update
[P1T2] Total sample handling time: 0.0350sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 2 model parses with average time of 0.0265sec
Gold standard as optimal model parse:
0 :: . 1v                                                        
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 2
[P1T2] =========================
[P1T2] 0 : ================== [2]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0220sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999900
[P1T2] No update
[P1T2] Total sample handling time: 0.0270sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 3 model parses with average time of 0.0250sec
Gold standard as optimal model parse:
0 :: . 1v  v                                                     
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 3
[P1T2] =========================
[P1T2] 0 : ================== [3]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0200sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999800
[P1T2] No update
[P1T2] Total sample handling time: 0.0250sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 4 model parses with average time of 0.0238sec
Gold standard as optimal model parse:
0 :: . 1v  v  v                                                  
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 4
[P1T2] =========================
[P1T2] 0 : ================== [4]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0180sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999700
[P1T2] No update
[P1T2] Total sample handling time: 0.0220sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 5 model parses with average time of 0.0226sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v                                               
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 5
[P1T2] =========================
[P1T2] 0 : ================== [5]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0170sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999600
[P1T2] No update
[P1T2] Total sample handling time: 0.0210sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 6 model parses with average time of 0.0217sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v                                            
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 6
[P1T2] =========================
[P1T2] 0 : ================== [6]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0150sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999500
[P1T2] No update
[P1T2] Total sample handling time: 0.0190sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 7 model parses with average time of 0.0207sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v                                         
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 7
[P1T2] =========================
[P1T2] 0 : ================== [7]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0160sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999400
[P1T2] No update
[P1T2] Total sample handling time: 0.0180sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 8 model parses with average time of 0.0201sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v                                      
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 8
[P1T2] =========================
[P1T2] 0 : ================== [8]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0110sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999300
[P1T2] No update
[P1T2] Total sample handling time: 0.0140sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 9 model parses with average time of 0.0191sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v                                   
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 9
[P1T2] =========================
[P1T2] 0 : ================== [9]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0120sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999201
[P1T2] No update
[P1T2] Total sample handling time: 0.0140sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 10 model parses with average time of 0.0184sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v                                
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 10
[P1T2] =========================
[P1T2] 0 : ================== [10]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0110sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999101
[P1T2] No update
[P1T2] Total sample handling time: 0.0130sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 11 model parses with average time of 0.0177sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v                             
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 11
[P1T2] =========================
[P1T2] 0 : ================== [11]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0140sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.999001
[P1T2] No update
[P1T2] Total sample handling time: 0.0160sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 12 model parses with average time of 0.0174sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v                          
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 12
[P1T2] =========================
[P1T2] 0 : ================== [12]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0090sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998901
[P1T2] No update
[P1T2] Total sample handling time: 0.0110sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 13 model parses with average time of 0.0168sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v                       
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 13
[P1T2] =========================
[P1T2] 0 : ================== [13]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0090sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998801
[P1T2] No update
[P1T2] Total sample handling time: 0.0110sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 14 model parses with average time of 0.0162sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v                    
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 14
[P1T2] =========================
[P1T2] 0 : ================== [14]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0080sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998702
[P1T2] No update
[P1T2] Total sample handling time: 0.0100sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 15 model parses with average time of 0.0157sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v  v                 
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 15
[P1T2] =========================
[P1T2] 0 : ================== [15]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0080sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998602
[P1T2] No update
[P1T2] Total sample handling time: 0.0100sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 16 model parses with average time of 0.0152sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v  v  v              
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 16
[P1T2] =========================
[P1T2] 0 : ================== [16]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0070sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998502
[P1T2] No update
[P1T2] Total sample handling time: 0.0090sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 17 model parses with average time of 0.0147sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v           
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 17
[P1T2] =========================
[P1T2] 0 : ================== [17]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0070sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998403
[P1T2] No update
[P1T2] Total sample handling time: 0.0090sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 18 model parses with average time of 0.0143sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v        
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 18
[P1T2] =========================
[P1T2] 0 : ================== [18]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0070sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998303
[P1T2] No update
[P1T2] Total sample handling time: 0.0080sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 19 model parses with average time of 0.0139sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v     
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] =========================
[P1T2] Training epoch 19
[P1T2] =========================
[P1T2] 0 : ================== [19]
[P1T2] Sample type: SingleSentence
[P1T2] the can of pop
soda:it
[P1T2] Model parsing time: 0.0070sec
[P1T2] Output is exact
[P1T2] Created 1 model parses for training sample:
[P1T2]   [30.12, V] soda:it
[P1T2] 	[10.060803] the :- S/NP : (lambda $0:e $0) [{LEX#139=0.0(1.0),XEME#3=10.0(1.0),XTMP#60=0.6080252884495341(0.1)}]
[P1T2] 	[0.000000] can :- NP/NP : (lambda $0:e $0) [{LEX#658=0.0(1.0),XEME#202=0.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[20.000000] of :- NP/NP : (lambda $0:e $0) [{LEX#295=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.1)}]
[P1T2] 	[-0.033854] pop :- NP : soda:it [{LEX#645=0.0(1.0),XEME#201=0.0(1.0),XTMP#25=-0.3385400278195512(0.1)}]
[P1T2] Rules used: lex[], >comp[0-0, 1-1], >comp[0-1, 2-2], >comp[1-1, 2-2], >comp[0-0, 1-2], >apply[0-2, 3-3]
[P1T2] {LEX#139=0.0(1.0),LEX#295=10.0(1.0),LEX#645=0.0(1.0),LEX#658=0.0(1.0),RULE#>apply=-0.11203327151862882(0.1),RULE#>comp=-0.022900786473506192(0.2),RULE#lex=0.26656308896075487(0.4),XEME#201=0.0(1.0),XEME#202=0.0(1.0),XEME#3=10.0(1.0),XEME#54=10.0(1.0),XTMP#18=0.0(0.2),XTMP#25=-0.3385400278195512(0.1),XTMP#60=0.6080252884495341(0.1)}
[P1T2] Positive update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Negative update: {LEX#139=1.0000000000000036, LEX#295=1.0, LEX#645=1.0000000000000036, LEX#658=1.0000000000000036, RULE#>apply=0.1795014343509492, RULE#>comp=0.12049856564905036, RULE#lex=0.39999999999999963, XEME#201=1.0000000000000036, XEME#202=1.0000000000000036, XEME#3=1.0000000000000036, XEME#54=1.0, XTMP#18=0.20000000000000015, XTMP#25=0.10000000000000024, XTMP#60=0.10000000000000024}
[P1T2] Scale: 0.998203
[P1T2] No update
[P1T2] Total sample handling time: 0.0090sec
[P1T2] Epoch stats:
[P1T2] Performed 1 lexical generation parses with average time of 0.0460sec
Updates per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Performed 20 model parses with average time of 0.0136sec
Gold standard as optimal model parse:
0 :: . 1v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  
New lexical entries per iteration: 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Valid (has a valid parse), per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
Valid and no update required, per iteration: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
Correct (match gold debug) per iteration: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

[P1T2] Final model:
Lexical feature sets:
	LexicalFeatureSet:
	{([what], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=129, ([take], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=358, ([take], S/S : (lambda $0:t $0))=532, ([of], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=357, ([3432], NP : l3_432:ro)=37, ([person], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=317, ([to], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=110, ([does], S/NP : (lambda $0:e $0))=298, ([of], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=303, ([bring], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=620, ([can], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=659, ([which], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=326, ([are], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=27, ([object], N : (lambda $0:e (object:<ob,t> $0)))=127, ([how, many], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=141, ([a], S/NP : (lambda $0:e $0))=368, ([does], S/S : (lambda $0:t $0))=464, ([of], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=271, ([ellen], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=569, ([can, you], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=252, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))))=80, ([take], PP/NP : (lambda $0:e (lambda $1:a (actionpatient:<a,<e,t>> $1 $0))))=35, ([is], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))))=268, ([are, there], S\NP : (lambda $0:e true:t))=484, ([of], S\S : (lambda $0:e $0))=274, ([which], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=96, ([to], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=543, ([where], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=42, ([a], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=186, ([the], S/S : (lambda $0:t $0))=159, ([big], S\S : (lambda $0:e $0))=604, ([of], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=366, ([bring], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=157, ([which], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=24, ([ellen], NP/NP : (lambda $0:e $0))=566, ([big], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=599, ([is], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))))=60, ([take], S\S : (lambda $0:t $0))=530, ([how, many], S\S : (lambda $0:e $0))=173, ([the], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=388, ([can, you], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=490, ([how], NP/NP : (lambda $0:e $0))=431, ([s], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (possesses:<pe,<e,t>> $1 $0)))))=26, ([of], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=308, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=120, ([what], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=432, ([the], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=306, ([s], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=243, ([have], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=379, ([a], S\S : (lambda $0:e $0))=194, ([deliver], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=517, ([can, you], S/NP : (lambda $0:e $0))=229, ([counter], NP : coffeecounter:sc)=305, ([are], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=235, ([big], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=593, ([peter], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=503, ([of], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=53, ([red], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=581, ([with], NP/NP : (lambda $0:e $0))=124, ([can], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=646, ([can, you], S\S : (lambda $0:t $0))=467, ([deliver], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=514, ([matteo, leonetti], NP : matteo:pe)=391, ([s], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=84, ([are], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=294, ([please], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=117, ([the], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=302, ([me], NP : me:pe)=417, ([a], NP/NP : (lambda $0:e $0))=474, ([how, many], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=267, ([what], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=19, ([hamburger], NP : hamburger:it)=265, ([that], S/S : (lambda $0:t $0))=344, ([the], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=198, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=70, ([3426], NP : l3_426:ro)=408, ([can], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=660, ([take], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=536, ([take], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=529, ([that], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=385, ([s], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=119, ([where], S/NP : (lambda $0:e $0))=211, ([please], NP/NP : (lambda $0:e $0))=485, ([can], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=652, ([where], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=92, ([to], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=542, ([burger], NP : hamburger:it)=589, ([what], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=28, ([what], NP/NP : (lambda $0:e $0))=130, ([have], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=138, ([take], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))))=64, ([take], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=528, ([bring], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=82, ([not], N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=264, ([walk], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=349, ([walk], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=314, ([that], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=178, ([are], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=146, ([to], S\S : (lambda $0:t $0))=553, ([ellen], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=562, ([of], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (possesses:<pe,<e,t>> $1 $0)))))=442, ([big], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=594, ([of], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=452, ([do, not], N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=352, ([can, you], S\S : (lambda $0:e $0))=459, ([to], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=555, ([3414a], NP : l3_414a:ro)=122, ([how, many], S/S : (lambda $0:t $0))=486, ([a], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=228, ([with], S\S : (lambda $0:t $0))=319, ([how, many], S/NP : (lambda $0:e $0))=169, ([a], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=483, ([are], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=266, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))))=15, ([what], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=190, ([does], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=372, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=163, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))))=176, ([3402], NP : l3_402:ro)=356, ([what], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=76, ([to], S/S : (lambda $0:t $0))=551, ([is], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=22, ([can], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=653, ([where], S\S : (lambda $0:e $0))=455, ([are], S\S : (lambda $0:t $0))=23, ([does], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=100, ([3422], NP : l3_422:ro)=348, ([how], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=325, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))))=214, ([does], S\S : (lambda $0:t $0))=449, ([to], PP/NP : (lambda $0:e (lambda $1:a (actionrecipient:<a,<e,t>> $1 $0))))=259, ([where], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=361, ([the], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=227, ([which], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=164, ([walk], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=253, ([a], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=118, ([bring], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=192, ([the], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=3, ([please], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=133, ([how, many], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=262, ([is], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=328, ([can, you], NP/NP : (lambda $0:e $0))=126, ([with], S/S : (lambda $0:t $0))=450, ([offices], N : (lambda $0:e (office:<of,t> $0)))=199, ([smart], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=642, ([how], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=402, ([take], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=533, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))))=134, ([have], S\S : (lambda $0:t $0))=88, ([rooms], N : (lambda $0:e (room:<ro,t> $0)))=321, ([deliver], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=519, ([objects], N : (lambda $0:e (object:<ob,t> $0)))=158, ([smartphone], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=622, ([which], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=161, ([deliver], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=521, ([big], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=598, ([peter], NP/NP : (lambda $0:e $0))=493, ([have], S/S : (lambda $0:t $0))=258, ([which], S\S : (lambda $0:e $0))=412, ([please], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=313, ([does], S\S : (lambda $0:e $0))=465, ([how, many], S\S : (lambda $0:t $0))=215, ([count], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=443, ([s], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=309, ([the], S\S : (lambda $0:t $0))=195, ([how], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=72, ([with], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=172, ([a], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=343, ([to], NP/NP : (lambda $0:e $0))=547, ([smart], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=632, ([how, many], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=399, ([do, not], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))))=401, ([bring], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=135, ([can], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=654, ([excluding], PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=210, ([who], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=451, ([please], S\S : (lambda $0:t $0))=390, ([no], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=222, ([tell, me], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=436, ([how, many], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=75, ([tell, me], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=438, ([with], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=453, ([ellen], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=561, ([count], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=273, ([count], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=489, ([smart], S/S : (lambda $0:t $0))=636, ([smartphone], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=623, ([of], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=218, ([please], S/S : (lambda $0:t $0))=476, ([s], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=297, ([ellen], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=563, ([how], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=49, ([smartphone], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))))=629, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))))=418, ([that], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=69, ([take], S\S : (lambda $0:e $0))=534, ([smart], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=637, ([which], S/NP : (lambda $0:e $0))=87, ([can, you], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=460, ([smart], S\S : (lambda $0:t $0))=635, ([deliver], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 bring:a))))=509, ([red], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=575, ([smartphone], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))))=624, ([smartphone], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))))=625, ([bring], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))))=83, ([bring], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))))=183, ([carol, clark], NP : carol:pe)=285, ([who], N : (lambda $0:e (person:<pe,t> $0)))=304, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))))=371, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> walk:a)))))=187, ([does], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=463, ([smart], S\S : (lambda $0:e $0))=643, ([of], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=384, ([smart], NP/NP : (lambda $0:e $0))=644, ([can], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=649, ([please], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=221, ([red], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=585, ([tell, me], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=345, ([a], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=337, ([the], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=478, ([please], S/NP : (lambda $0:e $0))=182, ([are], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=324, ([take], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=537, ([to], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))))=269, ([what], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=46, ([have], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=396, ([how], S\S : (lambda $0:e $0))=111, ([smartphone], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))))=628, ([take], NP/NP : (lambda $0:e $0))=539, ([to], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=549, ([does], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=421, ([not], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))))=339, ([bring], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=614, ([bring], NP/NP : (lambda $0:e $0))=617, ([what], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=261, ([with], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=457, ([is], S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $1 $0))))=277, ([stacy, miller], NP : stacy:pe)=39, ([excluding], S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $1 $0))))=145, ([that], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=398, ([excluding], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=99, ([count], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=204, ([red], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=577, ([are], S/S : (lambda $0:t $0))=136, ([take], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 bring:a))))=300, ([with], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=223, ([how], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=434, ([ellen], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=556, ([that], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=364, ([count], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=95, ([can], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=657, ([tell, me], S/NP : (lambda $0:e $0))=241, ([ellen], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=559, ([peter], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=497, ([take], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=272, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))))=376, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> walk:a)))))=480, ([bring], S/NP : (lambda $0:e $0))=615, ([take], PP/NP : (lambda $0:e (lambda $1:a (actionrecipient:<a,<e,t>> $1 $0))))=239, ([to], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=554, ([have], NP/NP : (lambda $0:e $0))=472, ([3418], NP : l3_418:ro)=400, ([3428], NP : l3_428:ro)=245, ([fruit], NP : apple:it)=572, ([bob], NP : bob:pe)=523, ([3436], NP : l3_436:ro)=375, ([bring], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=621, ([can, you], S/S : (lambda $0:t $0))=238, ([deliver], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=513, ([count], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=109, ([s], S\NP/NP : (lambda $0:e (lambda $1:e (possesses:<pe,<e,t>> $1 $0))))=250, ([can, you], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=90, ([deliver], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))))=511, ([deliver], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))))=512, ([room], N : (lambda $0:e (room:<ro,t> $0)))=405, ([of], S\S : (lambda $0:t $0))=310, ([does], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=13, ([to], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=541, ([bring], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=86, ([walk], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=437, ([with], S/NP : (lambda $0:e $0))=219, ([are], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=202, ([take], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=59, ([does], NP/NP : (lambda $0:e $0))=20, ([stone], NP : peter:pe)=506, ([to], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=546, ([can, you], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=386, ([bring], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=0, ([3416], NP : l3_416:ro)=115, ([peter], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=500, ([mac], NP : hamburger:it)=605, ([of], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=435, ([peter], S\S : (lambda $0:t $0))=495, ([the], NP/NP : (lambda $0:e $0))=143, ([are], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=56, ([no], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))))=469, ([does], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=234, ([alice, anderson], NP : alice:pe)=91, ([does], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=263, ([bring], S\S : (lambda $0:e $0))=616, ([with], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=29, ([people], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=481, ([how, many], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=367, ([is], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=189, ([big], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=595, ([smart], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=633, ([is], S\S : (lambda $0:e $0))=327, ([have], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=179, ([of], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=41, ([how, many], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=48, ([how, many], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=276, ([take], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=538, ([3510], NP : l3_510:ro)=410, ([take], S/NP : (lambda $0:e $0))=540, ([smart], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=641, ([where], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=66, ([how, many], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=30, ([peter], S/S : (lambda $0:t $0))=498, ([person], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=51, ([please], S\S : (lambda $0:e $0))=63, ([of], S\NP/NP : (lambda $0:e (lambda $1:e (possesses:<pe,<e,t>> $1 $0))))=31, ([peter], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=502, ([take], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))))=58, ([take], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))))=106, ([how], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=446, ([bring], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=610, ([is], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=177, ([that], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=288, ([3512], NP : l3_512:ro)=322, ([of], NP/NP : (lambda $0:e $0))=295, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=105, ([alice], NP : alice:pe)=507, ([take], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=128, ([are], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=407, ([of], S/NP : (lambda $0:e $0))=475, ([please], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=409, ([of], S/S : (lambda $0:t $0))=426, ([jivko, sinapov], NP : jivko:pe)=346, ([what], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=16, ([bring], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=613, ([person], N : (lambda $0:e (person:<pe,t> $0)))=374, ([which], NP/NP : (lambda $0:e $0))=237, ([which], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=424, ([big], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=602, ([have], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=232, ([smart], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=630, ([trashcan], NP : trashcan:it)=369, ([where], NP/NP : (lambda $0:e $0))=397, ([deliver], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=518, ([smartphone], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))))=626, ([not], PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=382, ([a], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=289, ([take], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=338, ([count], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=290, ([can], S\S : (lambda $0:e $0))=647, ([soda], NP : soda:it)=142, ([3502], NP : l3_502:ro)=394, ([are], S/NP : (lambda $0:e $0))=257, ([not], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=52, ([with], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=233, ([bring], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=330, ([how], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=180, ([a], S/S : (lambda $0:t $0))=393, ([can, you], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=420, ([can], S/S : (lambda $0:t $0))=650, ([red], S\S : (lambda $0:e $0))=574, ([walk], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=25, ([bring], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=280, ([3508], NP : l3_508:ro)=216, ([red], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=583, ([apple], NP : apple:it)=462, ([raymond, mooney], NP : ray:pe)=363, ([are], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=247, ([bob, brown], NP : bob:pe)=414, ([deliver], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=508, ([go], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=286, ([red], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=587, ([what], S\S : (lambda $0:t $0))=395, ([please], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=468, ([of], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=73, ([go], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=14, ([3430], NP : l3_430:ro)=419, ([to], S\S : (lambda $0:e $0))=548, ([how], S/NP : (lambda $0:e $0))=413, ([take], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=5, ([3412], NP : l3_412:ro)=334, ([people], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=351, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))))=329, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> walk:a $0)))))=47, ([have], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=171, ([big], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=601, ([where], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=296, ([what], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=240, ([tell, me], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=208, ([how, many], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=383, ([bring], S\S : (lambda $0:t $0))=609, ([ellen], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=558, ([ellen], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=567, ([are], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=71, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))))=62, ([that], NP/NP : (lambda $0:e $0))=246, ([please], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=275, ([what], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=377, ([peter], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=496, ([office], N : (lambda $0:e (office:<of,t> $0)))=256, ([what], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=406, ([bring], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=612, ([is], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=11, ([how, many], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=121, ([does], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=362, ([bring], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=608, ([peter], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=499, ([a], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=292, ([can, you], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=448, ([pop], NP : soda:it)=645, ([can, you], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=312, ([smart], S/NP : (lambda $0:e $0))=634, ([tell, me], NP/NP : (lambda $0:e $0))=94, ([take], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=103, ([what], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=301, ([can], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=651, ([how, many], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=168, ([big], S/NP : (lambda $0:e $0))=603, ([take], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=445, ([walk], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=9, ([what], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=353, ([where], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=175, ([that], S\S : (lambda $0:e $0))=45, ([what], S\S : (lambda $0:e $0))=359, ([s], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=68, ([how], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=123, ([how, many], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=244, ([are], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=323, ([go], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=209, ([is], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))))=116, ([have], S/NP : (lambda $0:e $0))=167, ([the], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=473, ([red], S/S : (lambda $0:t $0))=576, ([please], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=98, ([with], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=54, ([people], N : (lambda $0:e (person:<pe,t> $0)))=433, ([take], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=166, ([is], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=416, ([big], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=592, ([what], S/S : (lambda $0:t $0))=10, ([go], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=291, ([bring], S/S : (lambda $0:t $0))=618, ([is], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=162, ([smart], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=638, ([can], NP/NP : (lambda $0:e $0))=658, ([kazunori, iwata], NP : kazunori:pe)=224, ([red], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=582, ([how], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=217, ([have], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=311, ([dana, ballard], NP : dana:pe)=34, ([are], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=174, ([bring], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=619, ([red], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=584, ([of], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=18, ([are], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=336, ([3404], NP : l3_404:ro)=61, ([are], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=466, ([which], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=415, ([is], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=137, ([the], S/NP : (lambda $0:e $0))=139, ([bring], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=43, ([are], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=148, ([are], S\S : (lambda $0:e $0))=125, ([what], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=403, ([how, many], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=156, ([a], S\S : (lambda $0:t $0))=196, ([what], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=479, ([tell, me], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=378, ([to], S/NP : (lambda $0:e $0))=550, ([daniel, urieli], NP : daniel:pe)=299, ([peter], S\S : (lambda $0:e $0))=501, ([ellen], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=564, ([which], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=340, ([how, many], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=2, ([smart], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=639, ([to], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=552, ([3414b], NP : l3_414b:ro)=333, ([bring], PP/NP : (lambda $0:e (lambda $1:a (actionrecipient:<a,<e,t>> $1 $0))))=293, ([that], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=392, ([where], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=440, ([bring], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=611, ([of], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=104, ([red], S\S : (lambda $0:t $0))=579, ([the], S\S : (lambda $0:e $0))=79, ([go], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=181, ([what], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=85, ([coffee], NP : coffee:it)=477, ([count], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=284, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> walk:a $0)))))=114, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))))=154, ([take], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=423, ([of], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=206, ([dennis], NP : dennis:pe)=525, ([go], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=205, ([where], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=255, ([how], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=8, ([big], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=590, ([peter], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=494, ([go], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=389, ([bring], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=607, ([ellen], S/NP : (lambda $0:e $0))=568, ([please], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=347, ([excluding], PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))))=65, ([s], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=101, ([who], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=307, ([how, many], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=197, ([where], S/S : (lambda $0:t $0))=55, ([have], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=78, ([where], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=144, ([of], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=165, ([to], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=545, ([peter], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=504, ([a], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=251, ([i], NP : me:pe)=236, ([how], S/S : (lambda $0:t $0))=36, ([ellen], S\S : (lambda $0:t $0))=565, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))))=74, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=57, ([of], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=132, ([you], NP : self:self)=429, ([bring], PP/NP : (lambda $0:e (lambda $1:a (actionpatient:<a,<e,t>> $1 $0))))=441, ([that], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=201, ([bring], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))))=32, ([3414], NP : l3_414:ro)=207, ([of], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=147, ([tell, me], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=149, ([tell, me], S\S : (lambda $0:t $0))=102, ([yourself], NP : self:self)=230, ([tell, me], S\S : (lambda $0:e $0))=470, ([smart], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=640, ([tell, me], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=387, ([smartphone], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))))=627, ([3516], NP : l3_516:ro)=131, ([are], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=225, ([3420], NP : l3_420:ro)=355, ([no], PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=185, ([can, you], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=278, ([bring], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=1, ([what], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=373, ([what], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=155, ([smart], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=631, ([peter], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=491, ([how, many], NP/NP : (lambda $0:e $0))=482, ([of], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=428, ([how, many], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=458, ([tell, me], S/S : (lambda $0:t $0))=231, ([that], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=200, ([peter, stone], NP : peter:pe)=320, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=67, ([are], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=113, ([ellen], S\S : (lambda $0:e $0))=557, ([does], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=17, ([go], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))))=153, ([red], NP/NP : (lambda $0:e $0))=580, ([do, not], PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=461, ([peter], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=505, ([take], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=7, ([with], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=89, ([piyush, khandelwal], NP : piyush:pe)=38, ([where], S\S : (lambda $0:t $0))=170, ([dennis, davis], NP : dennis:pe)=188, ([that], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=193, ([is], S/NP : (lambda $0:e $0))=488, ([s], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=152, ([take], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=531, ([red], S/NP : (lambda $0:e $0))=578, ([is], S/S : (lambda $0:t $0))=315, ([which], S\S : (lambda $0:t $0))=33, ([deliver], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=510, ([fuji], NP : apple:it)=573, ([deliver], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=516, ([s], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=213, ([of], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=160, ([have], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=318, ([big], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=596, ([excluding], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))))=427, ([to], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=544, ([go], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=332, ([are], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=471, ([peter], S/NP : (lambda $0:e $0))=492, ([tell, me], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=439, ([no], N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=254, ([is], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=281, ([take], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=381, ([is], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=350, ([what], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=93, ([does], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=331, ([bring], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 bring:a))))=4, ([big], S/S : (lambda $0:t $0))=591, ([phone], NP : phone:it)=606, ([the], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=226, ([big], NP/NP : (lambda $0:e $0))=597, ([with], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=335, ([count], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=287, ([the], PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=270, ([walk], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=77, ([can], S/NP : (lambda $0:e $0))=655, ([do, not], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=279, ([please], PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=283, ([how, many], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=21, ([ellen], NP : ellen:pe)=571, ([is], S\S : (lambda $0:t $0))=341, ([deliver], PP/NP : (lambda $0:e (lambda $1:a (actionpatient:<a,<e,t>> $1 $0))))=522, ([to], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=150, ([deliver], S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=515, ([ellen, edwards], NP : ellen:pe)=411, ([are], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=430, ([carol], NP : carol:pe)=524, ([count], S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))))=380, ([of], N : (lambda $0:e (person:<pe,t> $0)))=151, ([excluding], N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))))=112, ([cell, phone], NP : phone:it)=487, ([a], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=249, ([which], S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=425, ([shiqi, zhang], NP : shiqi:pe)=360, ([tell, me], PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=184, ([have], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=447, ([bring], N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=454, ([walk], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))))=316, ([walk], NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=108, ([how, many], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=44, ([take], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=526, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))))=40, ([walk], S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))))=107, ([where], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=191, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))))=212, ([go], S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))))=6, ([are], NP/NP : (lambda $0:e $0))=81, ([how], S\S : (lambda $0:t $0))=12, ([ellen], S/S : (lambda $0:t $0))=560, ([deliver], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=520, ([take], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=535, ([with], S\S : (lambda $0:e $0))=370, ([what], S/NP : (lambda $0:e $0))=342, ([can, you], N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=242, ([s], N : (lambda $0:e (person:<pe,t> $0)))=444, ([take], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=527, ([ellen], NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))))=570, ([can], S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=656, ([how, many], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))))=220, ([tell, me], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=203, ([s], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))))=282, ([is], NP/NP : (lambda $0:e $0))=50, ([with], S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=404, ([that], S\S : (lambda $0:t $0))=248, ([bring], S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))=456, ([big], S\S : (lambda $0:t $0))=600, ([which], S/S : (lambda $0:t $0))=260, ([excluding], NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))))=422, ([that], S/NP : (lambda $0:e $0))=365, ([calendar], NP : calendar:it)=140, ([red], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=586, ([can], S\S : (lambda $0:t $0))=648, ([have], S\S : (lambda $0:e $0))=97, ([which], NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))))=354, ([red], S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))))=588}
	edu.uw.cs.lil.tiny.parser.ccg.factoredlex.features.LexicalTemplateFeatureSet@690cbe41
	edu.uw.cs.lil.tiny.parser.ccg.factoredlex.features.LexemeFeatureSet@439ed348
Parse feature sets:
	edu.uw.cs.lil.tiny.parser.ccg.features.lambda.LogicalExpressionCoordinationFeatureSet@70413ea6
	edu.uw.cs.lil.tiny.parser.ccg.features.basic.RuleUsageFeatureSet@4b783ddd
Lexicon [size=963]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
the :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 bring:a))) [10.002775004670974]
how many :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
big :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
take :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [9.871308331943423]
is :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [0.33578951765503706]
what :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [10.0]
does :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
can :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [0.0]
what :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how many :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
is :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0019906155878]
are :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0014890027484175902]
what :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
with :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
can :- S/S : (lambda $0:t $0) [0.0]
take :- S/S : (lambda $0:t $0) [3.3854438193777883]
of :- S\NP/NP : (lambda $0:e (lambda $1:e (possesses:<pe,<e,t>> $1 $0))) [9.973343691097071]
burger :- NP : hamburger:it [-0.03385400278195513]
which :- S\S : (lambda $0:t $0) [10.0]
take :- PP/NP : (lambda $0:e (lambda $1:a (actionpatient:<a,<e,t>> $1 $0))) [9.837792519336205]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
piyush khandelwal :- NP : piyush:pe [31.40161524794391]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
where :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
that :- S\S : (lambda $0:e $0) [10.068291345195274]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [9.871308331943423]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
how many :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
smart :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
is :- NP/NP : (lambda $0:e $0) [20.0]
of :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [-1.7023865024054305]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
are :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [9.508300357858667]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
is :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.002203375871748]
please :- S\S : (lambda $0:e $0) [20.068291345195274]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998721031981141]
where :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [7.4910275637082675]
that :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [-0.0044854923293574465]
are :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
of :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
red :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
big :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
how many :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
can :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
what :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
have :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
walk :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0019906155878]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
bob :- NP : bob:pe [-0.03385400278195513]
are :- NP/NP : (lambda $0:e $0) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [0.0]
what :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
which :- S/NP : (lambda $0:e $0) [20.060802528844953]
have :- S\S : (lambda $0:t $0) [10.0]
to :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
with :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [20.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.9984436364624]
alice anderson :- NP : alice:pe [31.40161524794391]
big :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
what :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
where :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
tell me :- NP/NP : (lambda $0:e $0) [10.0]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
have :- S\S : (lambda $0:e $0) [10.068291345195274]
tell me :- S\S : (lambda $0:t $0) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.22645305221980896]
to :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.614373030288434]
to :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
count :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [20.0]
how :- S\S : (lambda $0:e $0) [10.068291345195274]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0014890027484175902]
excluding :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0015563635376011512]
can :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [0.0]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
is :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998510997251582]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
bring :- S/S : (lambda $0:t $0) [0.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012793821450442742]
3414a :- NP : l3_414a:ro [19.966145997218042]
ellen :- S/NP : (lambda $0:e $0) [3.4462463482227443]
with :- NP/NP : (lambda $0:e $0) [10.0]
are :- S\S : (lambda $0:e $0) [10.068291345195274]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
deliver :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [0.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
can you :- NP/NP : (lambda $0:e $0) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [9.868517767713866]
what :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
what :- NP/NP : (lambda $0:e $0) [10.0]
3516 :- NP : l3_516:ro [19.966145997218042]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
of :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 bring:a))) [0.002775004670975045]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
bring :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
bring :- NP/NP : (lambda $0:e $0) [0.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [-1.7023865024054305]
have :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the :- S/NP : (lambda $0:e $0) [10.060802528844953]
can :- S\S : (lambda $0:e $0) [0.06829134519527355]
how many :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [10.001990615587802]
the :- NP/NP : (lambda $0:e $0) [20.0]
take :- S\S : (lambda $0:e $0) [3.453735164573062]
are :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
excluding :- S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $1 $0))) [9.973343691097071]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.437217430801315]
of :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how many :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
tell me :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [31.435469250725863]
of :- N : (lambda $0:e (person:<pe,t> $0)) [10.0]
what :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
how many :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
take :- NP/NP : (lambda $0:e $0) [3.3854438193777883]
objects :- N : (lambda $0:e (object:<ob,t> $0)) [20.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
which :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
is :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
of :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61716352706864]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
have :- S/NP : (lambda $0:e $0) [10.060802528844953]
to :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
how many :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
how many :- S/NP : (lambda $0:e $0) [31.496271779570815]
how many :- S\S : (lambda $0:e $0) [10.068291345195274]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998720617854955]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
are :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
peter :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
that :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
have :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
how :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
go :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
please :- S/NP : (lambda $0:e $0) [10.060802528844953]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.9984436364624]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [9.995514507670643]
tell me :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [0.33578951765503706]
no :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> walk:a)))) [10.0]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0019906155878]
what :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
where :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [0.0]
bring :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012681985763864827]
peter :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [2.723415360515436]
a :- S\S : (lambda $0:e $0) [10.068291345195274]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
offices :- N : (lambda $0:e (office:<of,t> $0)) [20.0]
are :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.22645305221980896]
of :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
peter :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
go :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
3414 :- NP : l3_414:ro [19.966145997218042]
red :- S\S : (lambda $0:t $0) [0.0]
peter :- S\S : (lambda $0:t $0) [2.723415360515436]
go :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
excluding :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
smart :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
s :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.408637434896763]
red :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
how many :- S\S : (lambda $0:t $0) [10.0]
3508 :- NP : l3_508:ro [19.966145997218042]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
of :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
how many :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
please :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
no :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [20.0]
mac :- NP : hamburger:it [-0.03385400278195513]
ellen :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [3.385443819377791]
are :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
count :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [20.0]
a :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
yourself :- NP : self:self [19.966145997218042]
tell me :- S/S : (lambda $0:t $0) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [9.995514507670643]
with :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [23.13613917229336]
dennis :- NP : dennis:pe [-0.03385400278195513]
are :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [20.0]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [20.0]
i :- NP : me:pe [19.966145997218042]
take :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0015563635376011512]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0]
what :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
red :- S/NP : (lambda $0:e $0) [0.06080252884495341]
bring :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [0.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
peter :- S/S : (lambda $0:t $0) [2.723415360515436]
how many :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
to :- NP/NP : (lambda $0:e $0) [3.180226102553402]
can :- S/NP : (lambda $0:e $0) [0.06080252884495341]
are :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
that :- S\S : (lambda $0:t $0) [10.0]
a :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
s :- S\NP/NP : (lambda $0:e (lambda $1:e (possesses:<pe,<e,t>> $1 $0))) [4.741010626196493]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998510997251582]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.408637434896763]
can you :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998721031981141]
to :- S/S : (lambda $0:t $0) [3.27887659664833]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.216646302627645]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
where :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- S/NP : (lambda $0:e $0) [10.060802528844953]
which :- S/S : (lambda $0:t $0) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [10.001990615587802]
to :- PP/NP : (lambda $0:e (lambda $1:a (actionrecipient:<a,<e,t>> $1 $0))) [13.409665357921428]
bring :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [0.0]
does :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [3.3854438193777883]
hamburger :- NP : hamburger:it [19.966145997218042]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
ellen :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [0.3373455419249088]
fuji :- NP : apple:it [-0.03385400278195513]
is :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
bring :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
the :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S\S : (lambda $0:t $0) [0.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
count :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
of :- S\S : (lambda $0:e $0) [10.068291345195274]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.408637434896763]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [9.871307850367886]
how many :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
is :- S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $1 $0))) [19.97334369109707]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
please :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [0.0]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [23.13613917229336]
carol clark :- NP : carol:pe [31.40161524794391]
red :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
peter :- S/NP : (lambda $0:e $0) [5.5076332524080165]
count :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
that :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
go :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
bring :- PP/NP : (lambda $0:e (lambda $1:a (actionrecipient:<a,<e,t>> $1 $0))) [9.966484668968318]
are :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998720617854957]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998721031981141]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
who :- N : (lambda $0:e (person:<pe,t> $0)) [20.0]
the :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
who :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.002775004670973]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [23.13613917229336]
smart :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [0.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
of :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
to :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [0.0019906155878015516]
of :- S\S : (lambda $0:t $0) [10.0]
smart :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
have :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
can you :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
bring :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
walk :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
is :- S/S : (lambda $0:t $0) [20.0]
to :- S/NP : (lambda $0:e $0) [3.3396791254932836]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.9984436364624]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
big :- S\S : (lambda $0:e $0) [0.06829134519527355]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
big :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
rooms :- N : (lambda $0:e (room:<ro,t> $0)) [20.0]
count :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [20.0]
bring :- S\S : (lambda $0:e $0) [0.06829134519527355]
how many :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
are :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
is :- S\S : (lambda $0:e $0) [10.068291345195274]
is :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
bring :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
pop :- NP : soda:it [-0.03385400278195513]
3414b :- NP : l3_414b:ro [19.966145997218042]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.002775004670973]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [23.13613917229336]
smart :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [0.0]
are :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
a :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
which :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
what :- S/NP : (lambda $0:e $0) [20.060802528844953]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [9.69157178883012]
please :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
3422 :- NP : l3_422:ro [19.966145997218042]
is :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [20.0]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
people :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
what :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
do not :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
which :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012679386069968446]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0019906155878]
ellen :- NP : ellen:pe [-6.804654559173405]
of :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
shiqi zhang :- NP : shiqi:pe [31.40161524794391]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
does :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
of :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
how many :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
a :- S/NP : (lambda $0:e $0) [10.060802528844953]
trashcan :- NP : trashcan:it [19.966145997218042]
with :- S\S : (lambda $0:e $0) [10.068291345195274]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.22645305221980896]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
to :- S\S : (lambda $0:e $0) [6.7326117612213805]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
person :- N : (lambda $0:e (person:<pe,t> $0)) [20.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.2264533914875384]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [9.871308331943423]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [0.0019906155878015516]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.76986944884139]
count :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
take :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [9.871308331943423]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0019906155878]
to :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.437217430801315]
that :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [0.3373455419249088]
peter :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.408637434896763]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
matteo leonetti :- NP : matteo:pe [31.40161524794391]
that :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
deliver :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [0.004086374348967625]
a :- S/S : (lambda $0:t $0) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012679386069968446]
have :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
where :- NP/NP : (lambda $0:e $0) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
count :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [20.0]
take :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
that :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
how many :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
do not :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
what :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [20.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
with :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
room :- N : (lambda $0:e (room:<ro,t> $0)) [20.0]
what :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
3426 :- NP : l3_426:ro [19.966145997218042]
bob brown :- NP : bob:pe [31.40161524794391]
which :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
me :- NP : me:pe [19.966145997218042]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
3430 :- NP : l3_430:ro [19.966145997218042]
does :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
can you :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [9.513171375235766]
take :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [9.871308331943423]
which :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
of :- S/S : (lambda $0:t $0) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998732061393003]
excluding :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
you :- NP : self:self [19.966145997218042]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
are :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
what :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
how :- NP/NP : (lambda $0:e $0) [10.0]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
people :- N : (lambda $0:e (person:<pe,t> $0)) [20.0]
of :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
tell me :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998731801423613]
ellen :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
to :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [3.27887659664833]
walk :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
bring :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
peter :- NP/NP : (lambda $0:e $0) [2.723415360515436]
tell me :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.22645305221980896]
to :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [3.27887659664833]
tell me :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
big :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
bring :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
bring :- PP/NP : (lambda $0:e (lambda $1:a (actionpatient:<a,<e,t>> $1 $0))) [9.966484668968318]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
deliver :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [0.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
s :- N : (lambda $0:e (person:<pe,t> $0)) [10.408637434896763]
how :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
red :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
have :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
does :- S\S : (lambda $0:t $0) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
can :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
big :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
with :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
where :- S\S : (lambda $0:e $0) [10.068291345195274]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61808706783626]
bring :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
with :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
can you :- S\S : (lambda $0:e $0) [10.068291345195274]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [0.0]
can you :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
do not :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
carol :- NP : carol:pe [-0.03385400278195513]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.772660013070947]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
please :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
no :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.772659531495414]
big :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
smart :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
the :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
a :- NP/NP : (lambda $0:e $0) [10.0]
red :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
coffee :- NP : coffee:it [19.966145997218042]
to :- S\S : (lambda $0:t $0) [3.27887659664833]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [19.99551450767064]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [0.3373455419249088]
people :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.258364131370037]
a :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
take :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
are there :- S\NP : (lambda $0:e true:t) [31.435469250725863]
cell phone :- NP : phone:it [31.40161524794391]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
is :- S/NP : (lambda $0:e $0) [10.060802528844953]
can you :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [31.435469250725863]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.9984436364624]
how :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
walk :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.772659531495414]
what :- S/S : (lambda $0:t $0) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
does :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
how :- S\S : (lambda $0:t $0) [10.0]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0019906155878]
ellen :- NP/NP : (lambda $0:e $0) [3.385443819377791]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
does :- NP/NP : (lambda $0:e $0) [10.0]
which :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- S\S : (lambda $0:t $0) [10.0]
s :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (possesses:<pe,<e,t>> $1 $0)))) [7.4910275637082675]
smart :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
how many :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998721031981141]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.772660013070947]
dana ballard :- NP : dana:pe [31.40161524794391]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012789680188581157]
how :- S/S : (lambda $0:t $0) [10.0]
3432 :- NP : l3_432:ro [19.966145997218042]
stacy miller :- NP : stacy:pe [31.40161524794391]
of :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
how many :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
what :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
peter :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
red :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
how :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0]
smart :- S/S : (lambda $0:t $0) [0.0]
person :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
not :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.22645305221980896]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
with :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
where :- S/S : (lambda $0:t $0) [10.0]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.9984436364624]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61717477808665]
3404 :- NP : l3_404:ro [19.966145997218042]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [20.0]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [1.250097569764005]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61808706783626]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.258364131370037]
take :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
how :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
stone :- NP : peter:pe [5.41297671824888]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
the :- S\S : (lambda $0:e $0) [10.068291345195274]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [10.001990615587802]
s :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.408637434896763]
red :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [0.0]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [9.506695267318607]
big :- S/NP : (lambda $0:e $0) [0.06080252884495341]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
can you :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
big :- S/S : (lambda $0:t $0) [0.0]
count :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [20.0]
which :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
does :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
please :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
excluding :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
red :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [0.0]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [23.13613917229336]
red :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.408637434896763]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [9.514776465775826]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [10.0]
walk :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
to :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [6.721590344476555]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [19.99551450767064]
are :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
3416 :- NP : l3_416:ro [19.966145997218042]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
please :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
a :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
big :- NP/NP : (lambda $0:e $0) [0.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012681985763864827]
s :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.408637434896763]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
how many :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.002775004670973]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0]
how :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
object :- N : (lambda $0:e (object:<ob,t> $0)) [20.0]
ellen :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [-0.0044854923293574465]
please :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
can :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
are :- S/S : (lambda $0:t $0) [10.0]
is :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
calendar :- NP : calendar:it [19.966145997218042]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998731801423613]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
soda :- NP : soda:it [19.966145997218042]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012789680188581157]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.408637434896763]
where :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998731801423613]
to :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [6.721590344476555]
s :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [10.408637434896763]
bring :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [1.250097569764005]
fruit :- NP : apple:it [-0.03385400278195513]
the :- S/S : (lambda $0:t $0) [10.0]
of :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.22645305221980896]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0012681985763864827]
which :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [9.871308331943423]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [1.250097569764005]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
where :- S\S : (lambda $0:t $0) [10.0]
have :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
with :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [0.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
red :- S\S : (lambda $0:e $0) [0.06829134519527355]
where :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [10.0]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [1.8131245287220246]
is :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
ellen :- S/S : (lambda $0:t $0) [3.385443819377791]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.99872103198114]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
red :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
a :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
ellen :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
dennis davis :- NP : dennis:pe [31.40161524794391]
peter :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [2.723415360515436]
is :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
smart :- S\S : (lambda $0:e $0) [0.06829134519527355]
take :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
red :- NP/NP : (lambda $0:e $0) [0.0]
can :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
that :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [20.0]
the :- S\S : (lambda $0:t $0) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
peter :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
a :- S\S : (lambda $0:t $0) [10.0]
how many :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [20.0]
that :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998510997251582]
that :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
tell me :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
count :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.76986944884139]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
big :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [0.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
tell me :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.772660013070947]
where :- S/NP : (lambda $0:e $0) [20.060802528844953]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.9984436364624]
smart :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [10.0]
with :- S/NP : (lambda $0:e $0) [10.060802528844953]
take :- S/NP : (lambda $0:e $0) [6.83169016760053]
ellen :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
deliver :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [0.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
with :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
kazunori iwata :- NP : kazunori:pe [31.40161524794391]
can you :- S/NP : (lambda $0:e $0) [10.060802528844953]
have :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
does :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
big :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
smart :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
which :- NP/NP : (lambda $0:e $0) [10.0]
take :- PP/NP : (lambda $0:e (lambda $1:a (actionrecipient:<a,<e,t>> $1 $0))) [9.966484668968318]
can you :- S/S : (lambda $0:t $0) [10.0]
tell me :- S/NP : (lambda $0:e $0) [10.060802528844953]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998510997251582]
can you :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
s :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.408637434896763]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.99872103198114]
bring :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [9.995514507670643]
that :- NP/NP : (lambda $0:e $0) [10.0]
3428 :- NP : l3_428:ro [19.966145997218042]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998510997251582]
a :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
can :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
walk :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.002203375871748]
no :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
office :- N : (lambda $0:e (office:<of,t> $0)) [20.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
have :- S/S : (lambda $0:t $0) [10.0]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [-1.7023865024054305]
what :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
how many :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
not :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [20.0]
are :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
take :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [3.3854438193777883]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [0.0]
how many :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
to :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [6.720311376457697]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998732061393003]
of :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [9.871308331943423]
smart :- S/NP : (lambda $0:e $0) [0.06080252884495341]
please :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
alice :- NP : alice:pe [-0.03385400278195513]
can you :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
do not :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [31.435469250725863]
bring :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
is :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
s :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.408637434896763]
count :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
go :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
bring :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
red :- S/S : (lambda $0:t $0) [0.0]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
a :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
count :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
can :- NP/NP : (lambda $0:e $0) [0.0]
a :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.258364131370037]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
of :- NP/NP : (lambda $0:e $0) [20.0]
smartphone :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [-0.22489702794993724]
where :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [0.0019906155878015516]
s :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.408637434896763]
does :- S/NP : (lambda $0:e $0) [10.060802528844953]
daniel urieli :- NP : daniel:pe [31.40161524794391]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 bring:a))) [9.513955764318938]
what :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [0.33578951765503706]
the :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41413753131555]
of :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
counter :- NP : coffeecounter:sc [19.966145997218042]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998510997251582]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [19.99551450767064]
s :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [10.407369236320376]
deliver :- PP/NP : (lambda $0:e (lambda $1:a (actionpatient:<a,<e,t>> $1 $0))) [-0.033515331031681174]
deliver :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [-0.0044854923293574465]
go :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [19.99551450767064]
bring :- S/NP : (lambda $0:e $0) [0.06080252884495341]
please :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
person :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
have :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
with :- S\S : (lambda $0:t $0) [10.0]
ellen :- S\S : (lambda $0:e $0) [6.839178983950855]
take :- S\S : (lambda $0:t $0) [3.3854438193777883]
peter stone :- NP : peter:pe [25.95489399580429]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [20.002775004670973]
peter :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
3512 :- NP : l3_512:ro [19.966145997218042]
are :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
how :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how many :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
which :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
bring :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
does :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
go :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
3412 :- NP : l3_412:ro [19.966145997218042]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [9.513171375235766]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.0015563635376011512]
with :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
peter :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
take :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [9.871308331943423]
not :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
is :- S\S : (lambda $0:t $0) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
a :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
that :- S/S : (lambda $0:t $0) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
tell me :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.2264533914875384]
jivko sinapov :- NP : jivko:pe [31.40161524794391]
walk :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
can :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
3420 :- NP : l3_420:ro [19.966145997218042]
3402 :- NP : l3_402:ro [19.966145997218042]
count :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [20.0]
take :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [9.87539470629239]
what :- S\S : (lambda $0:e $0) [10.068291345195274]
smartphone :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($0 walk:a))) [1.8131245287220246]
where :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
to :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
raymond mooney :- NP : ray:pe [31.40161524794391]
smart :- NP/NP : (lambda $0:e $0) [0.0]
that :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
that :- S/NP : (lambda $0:e $0) [10.060802528844953]
to :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.27887659664833]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
s :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.408637434896763]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
smartphone :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.2264533914875384]
ellen :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
does :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
what :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [19.99551450767064]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61717477808665]
3436 :- NP : l3_436:ro [19.966145997218042]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> walk:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> walk:a)))) [10.0]
what :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
have :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
tell me :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
not :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [20.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998731801423613]
how many :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
of :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
can :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
ellen :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
can you :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
tell me :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.76986944884139]
the :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
go :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
please :- S\S : (lambda $0:t $0) [20.0]
walk :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 walk:a))) [19.99551450767064]
go :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
s :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [23.13613917229336]
bring :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
what :- S\S : (lambda $0:t $0) [10.0]
3502 :- NP : l3_502:ro [19.966145997218042]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> walk:a $0)))) [9.998443975730128]
3418 :- NP : l3_418:ro [19.966145997218042]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
how :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
are :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
please :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
which :- S\S : (lambda $0:e $0) [10.068291345195274]
3510 :- NP : l3_510:ro [19.966145997218042]
ellen edwards :- NP : ellen:pe [31.40161524794391]
ellen :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.385443819377791]
how :- S/NP : (lambda $0:e $0) [20.060802528844953]
is :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
ellen :- S\S : (lambda $0:t $0) [3.385443819377791]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443636462397]
big :- S\S : (lambda $0:t $0) [0.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
excluding :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (equals:<e,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.002203375871748]
peter :- S\S : (lambda $0:e $0) [2.7917067057107094]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
which :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443636462397]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61717477808665]
of :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
big :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [0.0]
how :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
take :- S/PP : (lambda $0:<a,t> (and:<t*,t> (action:<a,t> walk:a) ($0 bring:a))) [9.506695267318607]
take :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [3.3854438193777883]
can :- S\S : (lambda $0:t $0) [0.0]
where :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deliver :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [-0.001556024269871718]
can :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.256759380097705]
of :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (possesses:<pe,<e,t>> $1 $0)))) [10.0]
count :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
peter :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [2.723415360515436]
take :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [9.871308331943423]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
how many :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
smart :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [0.0]
can you :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
with :- S/S : (lambda $0:t $0) [10.0]
smart :- S\S : (lambda $0:t $0) [0.0]
who :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.0]
of :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> bring:a)))) [10.0]
how many :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionrecipient:<a,<e,t>> bring:a $0)))) [9.998720617854955]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
ellen :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [3.385443819377791]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionrecipient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
walk :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 walk:a) (actionpatient:<a,<e,t>> bring:a $0)))) [9.998443975730128]
take :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [16.61716352706864]
apple :- NP : apple:it [19.966145997218042]
does :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
does :- S/S : (lambda $0:t $0) [10.0]
does :- S\S : (lambda $0:e $0) [10.068291345195274]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.901351681127526]
are :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [20.0]
can you :- S\S : (lambda $0:t $0) [10.0]
tell me :- S\S : (lambda $0:e $0) [10.068291345195274]
are :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443636462397]
have :- NP/NP : (lambda $0:e $0) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [9.871307850367886]
of :- S/NP : (lambda $0:e $0) [10.060802528844953]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
please :- S/S : (lambda $0:t $0) [10.0]
the :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [19.41253244077549]
what :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [20.0]
take :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionpatient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [9.868517767713866]
go :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> walk:a $0) (action:<a,t> walk:a)))) [10.0]
bring :- S/PP/NP : (lambda $0:e (lambda $1:<a,t> (and:<t*,t> (action:<a,t> bring:a) ($1 bring:a) (actionpatient:<a,<e,t>> bring:a $0)))) [19.998443975730126]
how many :- NP/NP : (lambda $0:e $0) [10.0]
please :- NP/NP : (lambda $0:e $0) [10.0]
deliver :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [0.0]
how many :- S/S : (lambda $0:t $0) [10.0]
bring :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [20.0]
of :- NP/N\NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [10.004086374348967]
count :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
phone :- NP : phone:it [-0.03385400278195513]
walk :- S/NP/NP : (lambda $0:e (lambda $1:e (and:<t*,t> (actionpatient:<a,<e,t>> bring:a $1) (actionrecipient:<a,<e,t>> bring:a $0) (action:<a,t> bring:a)))) [10.0]
of :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (the:<<e,t>,e> (lambda $2:e (and:<t*,t> ($1 $2) (possesses:<pe,<e,t>> $0 $2) (person:<pe,t> $0)))))) [20.0]
Feature vector
{LEX#0=10.0, LEX#1=0.0, LEX#10=0.0, LEX#100=10.0, LEX#101=12.723415363047629, LEX#102=0.0, LEX#103=0.0, LEX#104=0.0, LEX#105=0.0, LEX#106=0.0, LEX#107=0.0, LEX#108=0.0, LEX#109=10.0, LEX#11=10.0, LEX#110=0.0, LEX#111=0.0, LEX#112=0.0, LEX#113=0.0, LEX#114=0.0, LEX#115=10.0, LEX#116=0.0, LEX#117=0.0, LEX#118=10.0, LEX#119=0.0, LEX#12=0.0, LEX#120=0.0, LEX#121=0.0, LEX#122=10.0, LEX#123=0.0, LEX#124=0.0, LEX#125=0.0, LEX#126=0.0, LEX#127=10.0, LEX#128=0.0, LEX#129=0.0, LEX#13=10.0, LEX#130=0.0, LEX#131=10.0, LEX#132=0.0, LEX#133=0.0, LEX#134=0.0, LEX#135=0.0, LEX#136=0.0, LEX#137=0.0, LEX#138=0.0, LEX#139=0.0, LEX#14=10.0, LEX#140=10.0, LEX#141=0.0, LEX#142=10.0, LEX#143=10.0, LEX#144=0.0, LEX#145=0.0, LEX#146=0.0, LEX#147=0.0, LEX#148=0.0, LEX#149=21.435469250725863, LEX#15=0.0, LEX#150=0.0, LEX#151=0.0, LEX#152=0.0, LEX#153=0.0, LEX#154=0.0, LEX#155=0.0, LEX#156=0.0, LEX#157=0.0, LEX#158=10.0, LEX#159=0.0, LEX#16=0.0, LEX#160=0.0, LEX#161=10.0, LEX#162=0.0, LEX#163=0.0, LEX#164=0.0, LEX#165=10.0, LEX#166=0.0, LEX#167=0.0, LEX#168=21.435469250725863, LEX#169=21.435469250725863, LEX#17=0.0, LEX#170=0.0, LEX#171=0.0, LEX#172=0.0, LEX#173=0.0, LEX#174=0.0, LEX#175=0.0, LEX#176=0.0, LEX#177=0.0, LEX#178=0.0, LEX#179=10.0, LEX#18=10.0, LEX#180=0.0, LEX#181=0.0, LEX#182=0.0, LEX#183=0.0, LEX#184=0.0, LEX#185=0.0, LEX#186=0.0, LEX#187=0.0, LEX#188=21.435469250725863, LEX#189=10.0, LEX#19=0.0, LEX#190=0.0, LEX#191=0.0, LEX#192=0.0, LEX#193=0.0, LEX#194=0.0, LEX#195=0.0, LEX#196=0.0, LEX#197=0.0, LEX#198=10.0, LEX#199=10.0, LEX#2=0.0, LEX#20=0.0, LEX#200=0.0, LEX#201=0.0, LEX#202=0.0, LEX#203=0.0, LEX#204=0.0, LEX#205=0.0, LEX#206=0.0, LEX#207=10.0, LEX#208=0.0, LEX#209=0.0, LEX#21=0.0, LEX#210=0.0, LEX#211=10.0, LEX#212=0.0, LEX#213=0.0, LEX#214=0.0, LEX#215=0.0, LEX#216=10.0, LEX#217=0.0, LEX#218=0.0, LEX#219=0.0, LEX#22=10.0, LEX#220=0.0, LEX#221=0.0, LEX#222=10.0, LEX#223=0.0, LEX#224=21.435469250725863, LEX#225=0.0, LEX#226=0.0, LEX#227=0.0, LEX#228=0.0, LEX#229=0.0, LEX#23=0.0, LEX#230=10.0, LEX#231=0.0, LEX#232=0.0, LEX#233=0.0, LEX#234=0.0, LEX#235=10.0, LEX#236=10.0, LEX#237=0.0, LEX#238=0.0, LEX#239=0.0, LEX#24=0.0, LEX#240=0.0, LEX#241=0.0, LEX#242=0.0, LEX#243=0.0, LEX#244=0.0, LEX#245=10.0, LEX#246=0.0, LEX#247=0.0, LEX#248=0.0, LEX#249=0.0, LEX#25=10.0, LEX#250=-2.723360628608845, LEX#251=0.0, LEX#252=0.0, LEX#253=0.0, LEX#254=0.0, LEX#255=0.0, LEX#256=10.0, LEX#257=0.0, LEX#258=0.0, LEX#259=6.721590344476555, LEX#26=0.0, LEX#260=0.0, LEX#261=0.0, LEX#262=0.0, LEX#263=0.0, LEX#264=10.0, LEX#265=10.0, LEX#266=10.0, LEX#267=0.0, LEX#268=0.0, LEX#269=0.0, LEX#27=0.0, LEX#270=0.0, LEX#271=0.0, LEX#272=0.0, LEX#273=0.0, LEX#274=0.0, LEX#275=10.0, LEX#276=0.0, LEX#277=10.0, LEX#278=0.0, LEX#279=21.435469250725863, LEX#28=0.0, LEX#280=0.0, LEX#281=0.0, LEX#282=0.0, LEX#283=0.0, LEX#284=0.0, LEX#285=21.435469250725863, LEX#286=0.0, LEX#287=0.0, LEX#288=10.0, LEX#289=0.0, LEX#29=0.0, LEX#290=0.0, LEX#291=0.0, LEX#292=0.0, LEX#293=0.0, LEX#294=10.0, LEX#295=10.0, LEX#296=0.0, LEX#297=0.0, LEX#298=0.0, LEX#299=21.435469250725863, LEX#3=0.0, LEX#30=0.0, LEX#300=0.0, LEX#301=0.0, LEX#302=10.0, LEX#303=0.0, LEX#304=10.0, LEX#305=10.0, LEX#306=0.0, LEX#307=0.0, LEX#308=0.0, LEX#309=0.0, LEX#31=0.0, LEX#310=0.0, LEX#311=0.0, LEX#312=0.0, LEX#313=0.0, LEX#314=0.0, LEX#315=10.0, LEX#316=0.0, LEX#317=0.0, LEX#318=0.0, LEX#319=0.0, LEX#32=0.0, LEX#320=18.71210862465605, LEX#321=10.0, LEX#322=10.0, LEX#323=0.0, LEX#324=0.0, LEX#325=0.0, LEX#326=10.0, LEX#327=0.0, LEX#328=0.0, LEX#329=0.0, LEX#33=0.0, LEX#330=0.0, LEX#331=0.0, LEX#332=0.0, LEX#333=10.0, LEX#334=10.0, LEX#335=0.0, LEX#336=0.0, LEX#337=0.0, LEX#338=0.0, LEX#339=0.0, LEX#34=21.435469250725863, LEX#340=0.0, LEX#341=0.0, LEX#342=10.0, LEX#343=0.0, LEX#344=0.0, LEX#345=0.0, LEX#346=21.435469250725863, LEX#347=0.0, LEX#348=10.0, LEX#349=0.0, LEX#35=0.0, LEX#350=10.0, LEX#351=0.0, LEX#352=0.0, LEX#353=0.0, LEX#354=0.0, LEX#355=10.0, LEX#356=10.0, LEX#357=0.0, LEX#358=0.0, LEX#359=0.0, LEX#36=0.0, LEX#360=21.435469250725863, LEX#361=0.0, LEX#362=0.0, LEX#363=21.435469250725863, LEX#364=0.0, LEX#365=0.0, LEX#366=0.0, LEX#367=0.0, LEX#368=0.0, LEX#369=10.0, LEX#37=10.0, LEX#370=0.0, LEX#371=0.0, LEX#372=0.0, LEX#373=0.0, LEX#374=10.0, LEX#375=10.0, LEX#376=0.0, LEX#377=0.0, LEX#378=0.0, LEX#379=0.0, LEX#38=21.435469250725863, LEX#380=0.0, LEX#381=0.0, LEX#382=10.0, LEX#383=0.0, LEX#384=0.0, LEX#385=0.0, LEX#386=0.0, LEX#387=0.0, LEX#388=0.0, LEX#389=0.0, LEX#39=21.435469250725863, LEX#390=10.0, LEX#391=21.435469250725863, LEX#392=10.0, LEX#393=0.0, LEX#394=10.0, LEX#395=0.0, LEX#396=0.0, LEX#397=0.0, LEX#398=0.0, LEX#399=0.0, LEX#4=0.0, LEX#40=0.0, LEX#400=10.0, LEX#401=0.0, LEX#402=0.0, LEX#403=10.0, LEX#404=0.0, LEX#405=10.0, LEX#406=0.0, LEX#407=0.0, LEX#408=10.0, LEX#409=0.0, LEX#41=0.0, LEX#410=10.0, LEX#411=21.435469250725863, LEX#412=0.0, LEX#413=10.0, LEX#414=21.435469250725863, LEX#415=0.0, LEX#416=0.0, LEX#417=10.0, LEX#418=0.0, LEX#419=10.0, LEX#42=0.0, LEX#420=0.0, LEX#421=0.0, LEX#422=0.0, LEX#423=0.0, LEX#424=0.0, LEX#425=0.0, LEX#426=0.0, LEX#427=0.0, LEX#428=0.0, LEX#429=10.0, LEX#43=0.0, LEX#430=0.0, LEX#431=0.0, LEX#432=0.0, LEX#433=10.0, LEX#434=0.0, LEX#435=0.0, LEX#436=0.0, LEX#437=0.0, LEX#438=0.0, LEX#439=0.0, LEX#44=0.0, LEX#440=0.0, LEX#441=0.0, LEX#442=0.0, LEX#443=0.0, LEX#444=0.0, LEX#445=0.0, LEX#446=0.0, LEX#447=0.0, LEX#448=0.0, LEX#449=0.0, LEX#45=0.0, LEX#450=0.0, LEX#451=0.0, LEX#452=0.0, LEX#453=0.0, LEX#454=0.0, LEX#455=0.0, LEX#456=0.0, LEX#457=0.0, LEX#458=0.0, LEX#459=0.0, LEX#46=0.0, LEX#460=0.0, LEX#461=0.0, LEX#462=10.0, LEX#463=0.0, LEX#464=0.0, LEX#465=0.0, LEX#466=10.0, LEX#467=0.0, LEX#468=0.0, LEX#469=0.0, LEX#47=0.0, LEX#470=0.0, LEX#471=0.0, LEX#472=0.0, LEX#473=0.0, LEX#474=0.0, LEX#475=0.0, LEX#476=0.0, LEX#477=10.0, LEX#478=0.0, LEX#479=10.0, LEX#48=0.0, LEX#480=0.0, LEX#481=0.0, LEX#482=0.0, LEX#483=0.0, LEX#484=21.435469250725863, LEX#485=0.0, LEX#486=0.0, LEX#487=21.435469250725863, LEX#488=0.0, LEX#489=0.0, LEX#49=0.0, LEX#490=21.435469250725863, LEX#491=0.0, LEX#492=2.723415363047627, LEX#493=0.0, LEX#494=0.0, LEX#495=0.0, LEX#496=0.0, LEX#497=0.0, LEX#498=0.0, LEX#499=0.0, LEX#5=9.901351681127526, LEX#50=10.0, LEX#500=0.0, LEX#501=0.0, LEX#502=0.0, LEX#503=0.0, LEX#504=0.0, LEX#505=0.0, LEX#506=2.7234153605154177, LEX#507=0.0, LEX#508=0.0, LEX#509=0.0, LEX#51=0.0, LEX#510=0.0, LEX#511=0.0, LEX#512=0.0, LEX#513=0.0, LEX#514=0.0, LEX#515=0.0, LEX#516=0.0, LEX#517=0.0, LEX#518=0.0, LEX#519=0.0, LEX#52=0.0, LEX#520=0.0, LEX#521=0.0, LEX#522=0.0, LEX#523=0.0, LEX#524=0.0, LEX#525=0.0, LEX#526=0.0, LEX#527=0.0, LEX#528=0.0, LEX#529=0.0, LEX#53=0.0, LEX#530=0.0, LEX#531=0.0, LEX#532=0.0, LEX#533=0.0, LEX#534=0.0, LEX#535=0.0, LEX#536=0.0, LEX#537=0.0, LEX#538=0.0, LEX#539=0.0, LEX#54=0.0, LEX#540=3.3854438193777883, LEX#541=0.0, LEX#542=0.0, LEX#543=0.0, LEX#544=0.0, LEX#545=0.0, LEX#546=0.0, LEX#547=-0.09865049409492804, LEX#548=3.3854438193777767, LEX#549=0.0, LEX#55=0.0, LEX#550=0.0, LEX#551=0.0, LEX#552=0.0, LEX#553=0.0, LEX#554=0.0, LEX#555=0.0, LEX#556=0.0, LEX#557=3.385443819377791, LEX#558=0.0, LEX#559=0.0, LEX#56=0.0, LEX#560=0.0, LEX#561=0.0, LEX#562=0.0, LEX#563=0.0, LEX#564=0.0, LEX#565=0.0, LEX#566=0.0, LEX#567=0.0, LEX#568=0.0, LEX#569=0.0, LEX#57=0.0, LEX#570=0.0, LEX#571=-3.385400278195725, LEX#572=0.0, LEX#573=0.0, LEX#574=0.0, LEX#575=0.0, LEX#576=0.0, LEX#577=0.0, LEX#578=0.0, LEX#579=0.0, LEX#58=0.0, LEX#580=0.0, LEX#581=0.0, LEX#582=0.0, LEX#583=0.0, LEX#584=0.0, LEX#585=0.0, LEX#586=0.0, LEX#587=0.0, LEX#588=0.0, LEX#589=0.0, LEX#59=6.747134644719613, LEX#590=0.0, LEX#591=0.0, LEX#592=0.0, LEX#593=0.0, LEX#594=0.0, LEX#595=0.0, LEX#596=0.0, LEX#597=0.0, LEX#598=0.0, LEX#599=0.0, LEX#6=0.0, LEX#60=0.0, LEX#600=0.0, LEX#601=0.0, LEX#602=0.0, LEX#603=0.0, LEX#604=0.0, LEX#605=0.0, LEX#606=0.0, LEX#607=0.0, LEX#608=0.0, LEX#609=0.0, LEX#61=10.0, LEX#610=0.0, LEX#611=0.0, LEX#612=0.0, LEX#613=0.0, LEX#614=0.0, LEX#615=0.0, LEX#616=0.0, LEX#617=0.0, LEX#618=0.0, LEX#619=0.0, LEX#62=0.0, LEX#620=0.0, LEX#621=0.0, LEX#622=0.0, LEX#623=0.0, LEX#624=1.4730039821261407, LEX#625=-1.473003982126136, LEX#626=0.0, LEX#627=0.0, LEX#628=0.0, LEX#629=0.0, LEX#63=10.0, LEX#630=0.0, LEX#631=0.0, LEX#632=0.0, LEX#633=0.0, LEX#634=0.0, LEX#635=0.0, LEX#636=0.0, LEX#637=0.0, LEX#638=0.0, LEX#639=0.0, LEX#64=0.0, LEX#640=0.0, LEX#641=0.0, LEX#642=0.0, LEX#643=0.0, LEX#644=0.0, LEX#645=0.0, LEX#646=0.0, LEX#647=0.0, LEX#648=0.0, LEX#649=0.0, LEX#65=10.0, LEX#650=0.0, LEX#651=0.0, LEX#652=0.0, LEX#653=0.0, LEX#654=0.0, LEX#655=0.0, LEX#656=0.0, LEX#657=0.0, LEX#658=0.0, LEX#659=0.0, LEX#66=0.0, LEX#660=0.0, LEX#67=0.0, LEX#68=0.0, LEX#69=0.0, LEX#7=0.0, LEX#70=0.0, LEX#71=0.0, LEX#72=0.0, LEX#73=0.0, LEX#74=0.0, LEX#75=21.435469250725863, LEX#76=0.0, LEX#77=0.0, LEX#78=0.0, LEX#79=0.0, LEX#8=0.0, LEX#80=0.0, LEX#81=0.0, LEX#82=0.0, LEX#83=0.0, LEX#84=0.0, LEX#85=0.0, LEX#86=10.0, LEX#87=10.0, LEX#88=0.0, LEX#89=10.0, LEX#9=0.0, LEX#90=0.0, LEX#91=21.435469250725863, LEX#92=0.0, LEX#93=0.0, LEX#94=0.0, LEX#95=10.0, LEX#96=0.0, LEX#97=0.0, LEX#98=0.0, LEX#99=0.0, RULE#<apply=0.5097279463932634, RULE#<comp=0.1731855055594762, RULE#>apply=-0.11203327151862882, RULE#>comp=-0.022900786473506192, RULE#>plural_exists=-0.2665630890292885, RULE#lex=0.26656308896075487, XEME#0=10.0, XEME#1=10.0, XEME#10=9.871307850367886, XEME#100=10.0, XEME#101=10.0, XEME#102=10.0, XEME#103=10.0, XEME#104=10.0, XEME#105=10.0, XEME#106=10.0, XEME#107=10.0, XEME#108=10.0, XEME#109=10.0, XEME#11=10.0, XEME#110=10.0, XEME#111=10.0, XEME#112=10.0, XEME#113=10.408637434896763, XEME#114=10.0, XEME#115=10.0, XEME#116=10.0, XEME#117=10.0, XEME#118=10.408637434896763, XEME#119=10.0, XEME#12=10.0, XEME#120=10.0, XEME#121=10.0, XEME#122=10.0, XEME#123=10.0, XEME#124=10.0, XEME#125=7.276639373930196, XEME#126=10.0, XEME#127=10.0, XEME#128=10.0, XEME#129=10.0, XEME#13=10.0, XEME#130=10.0, XEME#131=10.0, XEME#132=10.0, XEME#133=10.0, XEME#134=10.0, XEME#135=10.0, XEME#136=10.0, XEME#137=10.0, XEME#138=10.0, XEME#139=10.408637434896763, XEME#14=10.0, XEME#140=10.0, XEME#141=10.0, XEME#142=10.0, XEME#143=9.871308331943423, XEME#144=10.0, XEME#145=10.0, XEME#146=10.0, XEME#147=10.0, XEME#148=10.0, XEME#149=10.0, XEME#15=10.0, XEME#150=10.0, XEME#151=10.0, XEME#152=10.0, XEME#153=10.0, XEME#154=10.0, XEME#155=10.0, XEME#156=10.0, XEME#157=10.0, XEME#158=10.0, XEME#159=9.872220361723645, XEME#16=10.0, XEME#160=10.0, XEME#161=10.0, XEME#162=10.0, XEME#163=10.0, XEME#164=2.723415360515436, XEME#165=2.7234153605154177, XEME#166=0.0, XEME#167=0.0, XEME#168=0.0, XEME#169=0.0, XEME#17=10.0, XEME#170=0.0, XEME#171=0.0, XEME#172=0.0, XEME#173=0.0, XEME#174=0.0, XEME#175=0.0, XEME#176=0.0, XEME#177=0.0, XEME#178=0.0, XEME#179=0.0, XEME#18=10.0, XEME#180=0.0, XEME#181=0.0, XEME#182=0.0, XEME#183=3.3854438193777883, XEME#184=3.27887659664833, XEME#185=3.385443819377791, XEME#186=-3.385400278195725, XEME#187=0.0, XEME#188=0.0, XEME#189=0.0, XEME#19=10.0, XEME#190=0.0, XEME#191=0.0, XEME#192=0.0, XEME#193=0.0, XEME#194=0.0, XEME#195=-0.22489702794993724, XEME#196=-0.22489702794993724, XEME#197=0.3373455419249088, XEME#198=0.3373455419249088, XEME#199=-0.22489702794993724, XEME#2=10.0, XEME#20=10.0, XEME#200=0.0, XEME#201=0.0, XEME#202=0.0, XEME#21=10.0, XEME#22=10.0, XEME#23=7.4910275637082675, XEME#24=10.0, XEME#25=10.0, XEME#26=9.871308331943423, XEME#27=10.0, XEME#28=10.0, XEME#29=10.0, XEME#3=10.0, XEME#30=10.0, XEME#31=10.0, XEME#32=10.0, XEME#33=10.0, XEME#34=10.0, XEME#35=10.0, XEME#36=10.0, XEME#37=10.0, XEME#38=10.0, XEME#39=10.0, XEME#4=10.0, XEME#40=10.0, XEME#41=10.0, XEME#42=9.512785850188024, XEME#43=10.0, XEME#44=10.0, XEME#45=10.0, XEME#46=10.0, XEME#47=10.0, XEME#48=10.0, XEME#49=9.511180759647964, XEME#5=9.511180759647964, XEME#50=10.0, XEME#51=9.872220361723645, XEME#52=10.0, XEME#53=10.0, XEME#54=10.0, XEME#55=10.0, XEME#56=10.0, XEME#57=10.0, XEME#58=10.0, XEME#59=10.0, XEME#6=10.0, XEME#60=10.408637434896763, XEME#61=10.0, XEME#62=10.0, XEME#63=10.0, XEME#64=10.0, XEME#65=10.0, XEME#66=10.0, XEME#67=10.0, XEME#68=10.0, XEME#69=10.408637434896763, XEME#7=9.871308331943423, XEME#70=10.0, XEME#71=10.0, XEME#72=9.868517767713866, XEME#73=10.0, XEME#74=6.721590344476555, XEME#75=10.0, XEME#76=10.0, XEME#77=10.0, XEME#78=10.0, XEME#79=10.0, XEME#8=10.0, XEME#80=10.0, XEME#81=10.0, XEME#82=10.0, XEME#83=10.0, XEME#84=10.0, XEME#85=10.0, XEME#86=10.408637434896763, XEME#87=9.69157178883012, XEME#88=10.0, XEME#89=10.0, XEME#9=10.0, XEME#90=10.0, XEME#91=10.0, XEME#92=9.871307850367886, XEME#93=10.0, XEME#94=9.511180759647964, XEME#95=10.0, XEME#96=10.0, XEME#97=10.0, XEME#98=10.0, XEME#99=10.0, XTMP#0=0.0, XTMP#1=0.0, XTMP#10=0.0, XTMP#100=0.04086374348967625, XTMP#101=-0.01556024269871718, XTMP#102=0.04086374348967625, XTMP#103=0.027750046709750446, XTMP#104=0.04086374348967625, XTMP#105=0.0, XTMP#106=0.0, XTMP#107=0.0, XTMP#108=0.0, XTMP#109=-0.012679386069968445, XTMP#11=0.0, XTMP#110=0.0, XTMP#12=0.0, XTMP#13=0.0, XTMP#14=0.019906155878015516, XTMP#15=0.0, XTMP#16=0.0, XTMP#17=0.0, XTMP#18=0.0, XTMP#19=0.0, XTMP#2=0.0, XTMP#20=0.0, XTMP#21=0.0, XTMP#22=-0.2665630890292887, XTMP#23=-0.012789680188581155, XTMP#24=0.0, XTMP#25=-0.3385400278195512, XTMP#26=-0.3351533103168117, XTMP#27=0.0, XTMP#28=0.0, XTMP#29=0.0, XTMP#3=0.0, XTMP#30=0.0, XTMP#31=0.0, XTMP#32=0.6829134519527355, XTMP#33=-0.01556024269871718, XTMP#34=0.0, XTMP#35=0.0, XTMP#36=0.0, XTMP#37=0.0, XTMP#38=0.0, XTMP#39=0.0, XTMP#4=0.027750046709750446, XTMP#40=0.0, XTMP#41=0.0, XTMP#42=-0.015563635376011511, XTMP#43=-0.04485492329357446, XTMP#44=-0.012681985763864825, XTMP#45=-0.01556024269871718, XTMP#46=0.022033758717483084, XTMP#47=-0.01556024269871718, XTMP#48=0.0, XTMP#49=0.0, XTMP#5=0.0, XTMP#50=0.0, XTMP#51=-0.012679386069968445, XTMP#52=0.0, XTMP#53=0.04086374348967625, XTMP#54=-0.01556024269871718, XTMP#55=0.0, XTMP#56=0.019906155878015516, XTMP#57=0.0, XTMP#58=-0.012681985763864825, XTMP#59=-0.01556024269871718, XTMP#6=-0.015563635376011511, XTMP#60=0.6080252884495341, XTMP#61=-0.04485492329357446, XTMP#62=0.0, XTMP#63=0.0, XTMP#64=0.04086374348967625, XTMP#65=0.0, XTMP#66=0.04086374348967625, XTMP#67=-0.012681985763864825, XTMP#68=-0.01279382145044274, XTMP#69=0.0, XTMP#7=0.0, XTMP#70=0.0, XTMP#71=-0.014890027484175901, XTMP#72=0.0, XTMP#73=0.0, XTMP#74=0.0, XTMP#75=-0.01556024269871718, XTMP#76=0.0, XTMP#77=0.0, XTMP#78=0.0, XTMP#79=-0.01556024269871718, XTMP#8=0.0, XTMP#80=0.0, XTMP#81=0.0, XTMP#82=-0.015563635376011511, XTMP#83=0.0, XTMP#84=-0.01556024269871718, XTMP#85=-0.04485492329357446, XTMP#86=0.0, XTMP#87=0.0, XTMP#88=0.019906155878015516, XTMP#89=0.0, XTMP#9=0.0, XTMP#90=0.0, XTMP#91=-0.014890027484175901, XTMP#92=0.0, XTMP#93=0.0, XTMP#94=0.0, XTMP#95=0.0, XTMP#96=0.0, XTMP#97=-0.012789680188581155, XTMP#98=0.0, XTMP#99=0.0}
[P1T2] Total run time 0.4590 seconds
[P1T2] ============ (Job load_and_train_and_save completed)
[P1T2] Saving model back to: /home/sujay/bwi_experimental/bwi_rlg/agent/dialog/../spf/geoquery/experiments/template/dialog_writeable/rlg.model
